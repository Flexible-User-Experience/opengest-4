{% extends 'admin/layout.html.twig' %}

{% block sonata_admin_content %}

    {{ parent() }}
    <script src="{{ asset('bundles/fosjsrouting/js/router.min.js') }}"></script>
    <script src="{{ path('fos_js_routing_js', { callback: 'fos.Router.setData' }) }}"></script>
    <div class="row">
        <div class="col-md-3">
            <div class="box box-success">
                <form action="{{ path('admin_app_purchase_purchaseinvoiceline_marginAnalysis') }}">
                    <div class="box-body">
                        <div class="form-group">
                            <label class="control-label" for="year">
                                Año
                            </label>
                            <select class="select2-container" style="width: 100%;" name="year" id="year">
                                {% for year in years %}
                                    <option
                                            value="{{ year }}"
                                            {% if year == selectedYear %}
                                                selected
                                            {% endif %}
                                    >{{ year }}</option>
                                {% endfor %}
                            </select>
                        </div>
                        <button class="btn btn-success" type="submit" id="btn_custom_submit" name="btn_custom_submit">
                            <i class="fa fa-arrow-right" aria-hidden="true"></i>
                            Aplicar
                        </button>
                        <button class="btn btn-success" type="submit" id="btn_custom_submit_download" name="btn_custom_submit_download" formaction="{{ path('admin_app_purchase_purchaseinvoiceline_downloadMarginAnalysis') }}">
                            <i class="fa fa-download" aria-hidden="true"></i>
                            Descargar en xls
                        </button>
                    </div>
                </form>
            </div>
        </div>
        <div class="col-md-9">
            <div class="box box-success">
                <canvas id="incomeChart"></canvas>
            </div>
        </div>
        <div class="col-md-3">
            <div class="box box-success">
                <div class="box-header">
                    <h4 class="box-title">
                        Filtros
                    </h4>
                </div>
                <div class="box-body">
                    <div class="form-group">
                        <label class="control-label" for="activity_line_select">
                            Línea de actividad
                        </label>
                        <select class="select2-container" style="width: 100%;" name="activityLine" id="activity_line_select">
                            <option value="">---</option>
                            {% for activityLine in activityLines %}
                                <option value="{{ activityLine.id }}">
                                    {{ activityLine }}
                                </option>
                            {% endfor %}
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="control-label" for="partner_select">
                            Cliente
                        </label>
                        <select class="select2-container" style="width: 100%;" name="partner" id="partner_select">
                            <option value="">---</option>
                            {% for partner in partners %}
                                <option value="{{ partner.id }}">
                                    {{ partner }}
                                </option>
                            {% endfor %}
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="control-label" for="operator_select">
                            Operario
                        </label>
                        <select class="select2-container" style="width: 100%;" name="operator" id="operator_select">
                            <option value="">---</option>
                            {% for operator in operators %}
                                <option value="{{ operator.id }}">
                                    {{ operator }}
                                </option>
                            {% endfor %}
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="control-label" for="vehicle_select">
                            Vehículo
                        </label>
                        <select class="select2-container" style="width: 100%;" name="vehicle" id="vehicle_select">
                            <option value="">---</option>
                            {% for vehicle in vehicles %}
                                <option value="{{ vehicle.id }}">
                                    {{ vehicle }}
                                </option>
                            {% endfor %}
                        </select>
                    </div>
                    <div class="form-group" id="sonata-ba-field-container-custom_date_from">
                        <label class="control-label" for="custom_date_from">
                            Desde
                        </label>
                        <div class="sonata-ba-field sonata-ba-field-standard-natural">
                            <div class="input-group">
                                <div class="input-group date" id="dp_custom_date_from">
                                    <input type="text"
                                           id="custom_date_from"
                                           name="custom_date_from"
                                           class="sonata-medium-date form-control"
                                           data-date-format="DD/MM/YYYY"
                                    >
                                    <span class="input-group-addon">
                                            <span class="fa-calendar fa"></span>
                                        </span>
                                </div>
                            </div>
                            <span class="help-block sonata-ba-field-widget-help sonata-ba-field-help"></span>
                        </div>
                    </div>
                    <div class="form-group" id="sonata-ba-field-container-custom_date_to">
                        <label class="control-label" for="custom_date_to">
                            Hasta
                        </label>
                        <div class="sonata-ba-field sonata-ba-field-standard-natural">
                            <div class="input-group">
                                <div class="input-group date" id="dp_custom_date_to">
                                    <input type="text"
                                           id="custom_date_to"
                                           name="custom_date_to"
                                           class="sonata-medium-date form-control"
                                           data-date-format="DD/MM/YYYY"
                                    >
                                <span class="input-group-addon">
                                    <span class="fa-calendar fa"></span>
                                </span>
                                </div>
                            </div>
                            <span class="help-block sonata-ba-field-widget-help sonata-ba-field-help"></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-9">
            <div class="box box-success">
                <canvas id="marginChart"></canvas>
            </div>
        </div>
        <div class="col-md-9">
            <div class="box box-success">
                <canvas id="incomeChartPerActivityLine"></canvas>
            </div>
        </div>
        <div class="col-md-3">
            <div class="box box-success">
                <div class="box-header">
                    <h4 class="box-title">
                        Totales
                    </h4>
                    <table class="table table-bordered table-hover sonata-ba-list">
                        <tr>
                            <td>Ingresos</td>
                            <td style="text-align: right" id="total_income">
                            </td>
                        </tr>
                        <tr>
                            <td>Costes directos operarios</td>
                            <td style="text-align: right" id="total_working_hours_direct_cost">
                            </td>
                        </tr>
                        <tr>
                            <td>Costes directos facturas albarán</td>
                            <td style="text-align: right" id="total_purchase_invoice_direct_cost">
                            </td>
                        </tr>
                        <tr>
                            <td>Costes indirectos vehículos</td>
                            <td style="text-align: right" id="total_vehicle_indirect_cost">
                            </td>
                        </tr>
                        <tr>
                            <td>Costes indirectos facturas operario</td>
                            <td style="text-align: right" id="total_operator_purchase_invoice_indirect_cost">
                            </td>
                        </tr>
                        <tr>
                            <td>Costes indirectos nóminas operario</td>
                            <td style="text-align: right" id="total_operator_payslip_indirect_cost">
                            </td>
                        </tr>
                        <tr>
                            <td>Total Costes</td>
                            <td style="text-align: right" id="total_cost">
                            </td>
                        </tr>
                        <tr>
                            <td>Total Margen</td>
                            <td style="text-align: right" id="total_margin">
                            </td>
                        </tr>
                        <tr>
                            <td>Total Margen %</td>
                            <td style="text-align: right" id="total_margin_percentage">
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>
        <div class="col-md-12">
            <div class="box box-success">
                <div class="box-header">
                    <h4 class="box-title">
                        Albaranes de venta
                    </h4>
                    <div class="box-body table-responsive no-padding">
                        <table class="table table-bordered table-striped table-hover sonata-ba-list">
                            <thead>
                                <tr class="sonata-ba-list-field-header">
                                    <th class="sonata-ba-list-field-header">
                                        Id
                                    </th>
                                    <th class="sonata-ba-list-field-header">
                                        Fecha
                                    </th>
                                    <th class="sonata-ba-list-field-header">
                                        Cliente
                                    </th>
                                    <th class="sonata-ba-list-field-header">
                                        Ingresos
                                    </th>
                                    <th class="sonata-ba-list-field-header">
                                        Costes Directos Operario
                                    </th>
                                    <th class="sonata-ba-list-field-header">
                                        Costes Directos Facturas Albarán
                                    </th>
                                    <th class="sonata-ba-list-field-header">
                                        Costes Indirectos Vehículo
                                    </th>
                                    <th class="sonata-ba-list-field-header">
                                        Costes Indirectos Facturas Operario
                                    </th>
                                    <th class="sonata-ba-list-field-header">
                                        Costes Indirectos Nóminas Operario
                                    </th>
                                    <th class="sonata-ba-list-field-header">
                                        Total Costes
                                    </th>
                                    <th class="sonata-ba-list-field-header">
                                        Margen
                                    </th>
                                    <th class="sonata-ba-list-field-header">
                                        Margen %
                                    </th>
                                    <th class="sonata-ba-list-field-header">
                                        Línea actividad
                                    </th>
                                </tr>
                            </thead>
                            <tbody id="delivery_note_table">
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script type="text/javascript">
      jQuery(document).ready(function() {
        let deliveryNotes = Object.values({{ saleDeliveryNotes | json_encode | raw }});
        let previousYearDeliveryNotes = Object.values({{ previousYearSaleDeliveryNotes | json_encode | raw }});
        let activityLines = [
          {% for activityLine in activityLines %}
            {
              'id' : {{ activityLine.id }},
              'name': '{{ activityLine.name }}'
            },
          {% endfor %}
        ];
        let deliveryNoteTable = jQuery('#delivery_note_table')
        let deliveryNotesFiltered = deliveryNotes
        let previousYearDeliveryNotesFiltered = previousYearDeliveryNotes
        let selectActivityLine = jQuery('#activity_line_select')
        let selectPartner = jQuery('#partner_select')
        let selectVehicle = jQuery('#vehicle_select')
        let selectOperator = jQuery('#operator_select')
        let fromDateNode = jQuery('#dp_custom_date_from')
        let toDateNode = jQuery('#dp_custom_date_to')
        let [
          totalIncome,
          totalWorkingHoursDirectCost,
          totalPurchaseInvoiceDirectCost,
          totalVehicleIndirectCost,
          totalOperatorPurchaseInvoiceIndirectCost,
          totalOperatorPayslipIndirectCost,
          totalCost,
          totalMargin,
          totalMarginPercentage
        ] = getTotals(deliveryNotesFiltered)
        let [
          pyTotalIncome,
          pyTWorkingHoursDirectCost,
          pyTPurchaseInvoiceDirectCost,
          pyTVehicleIndirectCost,
          pyTOperatorPurchaseInvoiceIndirectCost,
          pyTOperatorPayslipIndirectCost,
          pyTCost,
          pyTMargin,
          pyTMarginPercentage
        ] = getTotals(previousYearDeliveryNotesFiltered)
        let incomeChart = drawIncomeChart()
        let marginChart = drawMarginChart()
        let incomeChartPerActivityLine = drawIncomeChartPerActivityLine()

        updateAll()

        selectActivityLine.change((event) => updateAll() )
        selectPartner.change((event) => updateAll() )
        selectVehicle.change((event) => updateAll() )
        selectOperator.change((event) => updateAll() )
        fromDateNode.change((event) => updateAll() )
        toDateNode.change((event) => updateAll() )

        function updateAll() {
            deliveryNotesFiltered = applyFilters(deliveryNotes)
            previousYearDeliveryNotesFiltered = applyFilters(previousYearDeliveryNotes, true)
            updateDeliveryNoteTable()
            updateTotalsAndShow()
            updateIncomeChart(incomeChart)
            updateMarginChart(marginChart)
            updateIncomeChartPerActivityLine(incomeChartPerActivityLine)
        }

        function applyFilters(tempDeliveryNotes, previousYear = false) {
          let activityLineId = selectActivityLine.val()*1
          let partnerId = selectPartner.val()*1
          let vehicleId = selectVehicle.val()*1
          let operatorId = selectOperator.val()*1
          let fromDate = jQuery('#custom_date_from').val()
          let toDate = jQuery('#custom_date_to').val()
          let tempDeliveryNotesFiltered = tempDeliveryNotes.filter(deliveryNote => activityLineId ? deliveryNote.activityLine_id === activityLineId : true )
          tempDeliveryNotesFiltered = tempDeliveryNotesFiltered.filter(deliveryNote => partnerId ? deliveryNote.partner_id === partnerId : true )
          tempDeliveryNotesFiltered = tempDeliveryNotesFiltered.filter(deliveryNote => vehicleId ? deliveryNote.vehicle_id === vehicleId : true )
          tempDeliveryNotesFiltered = tempDeliveryNotesFiltered.filter(deliveryNote => operatorId ? deliveryNote.operator_id === operatorId : true )
          tempDeliveryNotesFiltered = tempDeliveryNotesFiltered.filter(deliveryNote => {
            if (previousYear) {
              return fromDate ? moment(deliveryNote.date, 'DD/MM/YYYY').add(1, 'year').isSameOrAfter(moment(fromDate, 'DD/MM/YYYY')) : true
            } else {
              return fromDate ? moment(deliveryNote.date, 'DD/MM/YYYY').isSameOrAfter(moment(fromDate, 'DD/MM/YYYY')) : true
            }
          } )
          tempDeliveryNotesFiltered = tempDeliveryNotesFiltered.filter(deliveryNote => {
            if (previousYear) {
              return toDate ? moment(deliveryNote.date, 'DD/MM/YYYY').add(1, 'year').isSameOrBefore(moment(toDate, 'DD/MM/YYYY')) : true
            } else {
              return toDate ? moment(deliveryNote.date, 'DD/MM/YYYY').isSameOrBefore(moment(toDate, 'DD/MM/YYYY')) : true
            }
          } )
          tempDeliveryNotesFiltered = tempDeliveryNotesFiltered.sort((a, b) => {
            return moment(a.date, 'DD/MM/YYYY').isSameOrAfter(moment(b.date, 'DD/MM/YYYY')) ? 1 : -1
          })

          return tempDeliveryNotesFiltered;
        }

        function updateTotalsAndShow() {
          [
            totalIncome,
            totalWorkingHoursDirectCost,
            totalPurchaseInvoiceDirectCost,
            totalVehicleIndirectCost,
            totalOperatorPurchaseInvoiceIndirectCost,
            totalOperatorPayslipIndirectCost,
            totalCost,
            totalMargin,
            totalMarginPercentage
          ] = getTotals(deliveryNotesFiltered);
          [
            pyTotalIncome,
            pyTWorkingHoursDirectCost,
            pyTPurchaseInvoiceDirectCost,
            pyTVehicleIndirectCost,
            pyTOperatorPurchaseInvoiceIndirectCost,
            pyTOperatorPayslipIndirectCost,
            pyTCost,
            pyTMargin,
            pyTMarginPercentage
          ] = getTotals(previousYearDeliveryNotesFiltered)
          jQuery('#total_income').text( numberFormat(totalIncome, true))
            jQuery('#total_working_hours_direct_cost').text( numberFormat(totalWorkingHoursDirectCost, true))
            jQuery('#total_purchase_invoice_direct_cost').text( numberFormat(totalPurchaseInvoiceDirectCost, true) )
            jQuery('#total_vehicle_indirect_cost').text( numberFormat(totalVehicleIndirectCost, true))
            jQuery('#total_operator_purchase_invoice_indirect_cost').text( numberFormat(totalOperatorPurchaseInvoiceIndirectCost, true))
            jQuery('#total_operator_payslip_indirect_cost').text( numberFormat(totalOperatorPayslipIndirectCost, true))
            jQuery('#total_cost').text( numberFormat(totalCost, true))
            jQuery('#total_margin').text( numberFormat(totalMargin, true))
            jQuery('#total_margin_percentage').text( numberFormat(totalMarginPercentage) + ' %')
        }

        function updateDeliveryNoteTable() {
          deliveryNoteTable.empty()
          for( const deliveryNote of deliveryNotesFiltered) {
            let row = document.createElement('tr');
            let idLink = `
                <a href="{{ path('admin_app_sale_saledeliverynote_edit', {'id': 'idOfElement'}) }}">
                    idOfElement
                </a>
            `
            idLink = idLink.replaceAll('idOfElement', deliveryNote.id)
            let cell = document.createElement('td')
            cell.classList.add('sonata-ba-list-field');
            cell.innerHTML = idLink
            row.appendChild(cell)
            createCellFromInfoAndAppendToRow(deliveryNote.date, row)
            createCellFromInfoAndAppendToRow(deliveryNote.partner_code + '-' + deliveryNote.partner_name, row)
            createCellFromInfoAndAppendToRow(deliveryNote.income, row)
            createCellFromInfoAndAppendToRow(deliveryNote.workingHoursDirectCost, row)
            createCellFromInfoAndAppendToRow(deliveryNote.purchaseInvoiceDirectCost, row)
            createCellFromInfoAndAppendToRow(deliveryNote.vehicleIndirectCost, row)
            createCellFromInfoAndAppendToRow(deliveryNote.operatorPurchaseInvoiceIndirectCost, row)
            createCellFromInfoAndAppendToRow(deliveryNote.operatorPayslipIndirectCost, row)
            createCellFromInfoAndAppendToRow(deliveryNote.totalCost, row)
            createCellFromInfoAndAppendToRow(deliveryNote.margin, row)
            createCellFromInfoAndAppendToRow( numberFormat(deliveryNote.marginPercentage) + ' %', row)
            createCellFromInfoAndAppendToRow(deliveryNote.activityLine, row, 'left')
            deliveryNoteTable.append(row)
          }
        }

        function getTotals(tempDeliveryNotes) {
          let totalIncome = tempDeliveryNotes.reduce((totalIncome, deliveryNote) => {
            return totalIncome + deliveryNote.income
          }, 0)
          let totalWorkingHoursDirectCost = tempDeliveryNotes.reduce((totalWorkingHoursDirectCost, deliveryNote) => {
            return totalWorkingHoursDirectCost + deliveryNote.workingHoursDirectCost
          }, 0)
          let totalPurchaseInvoiceDirectCost = tempDeliveryNotes.reduce((totalPurchaseInvoiceDirectCost, deliveryNote) => {
            return totalPurchaseInvoiceDirectCost + deliveryNote.purchaseInvoiceDirectCost
          }, 0)
          let totalVehicleIndirectCost = tempDeliveryNotes.reduce((totalVehicleIndirectCost, deliveryNote) => {
            return totalVehicleIndirectCost + deliveryNote.vehicleIndirectCost
          }, 0)
          let totalOperatorPurchaseInvoiceIndirectCost = tempDeliveryNotes.reduce((totalOperatorPurchaseInvoiceIndirectCost, deliveryNote) => {
            return totalOperatorPurchaseInvoiceIndirectCost + deliveryNote.operatorPurchaseInvoiceIndirectCost
          }, 0)
          let totalOperatorPayslipIndirectCost = tempDeliveryNotes.reduce((totalOperatorPayslipIndirectCost, deliveryNote) => {
            return totalOperatorPayslipIndirectCost + deliveryNote.operatorPayslipIndirectCost
          }, 0)
          let totalCost = tempDeliveryNotes.reduce((totalCost, deliveryNote) => {
            return totalCost + deliveryNote.totalCost
          }, 0)
          let totalMargin = tempDeliveryNotes.reduce((totalMargin, deliveryNote) => {
            return totalMargin + deliveryNote.margin
          }, 0)
          let totalMarginPercentage = totalIncome ? (totalMargin / totalIncome) * 100 : 0

          return [
            totalIncome,
            totalWorkingHoursDirectCost,
            totalPurchaseInvoiceDirectCost,
            totalVehicleIndirectCost,
            totalOperatorPurchaseInvoiceIndirectCost,
            totalOperatorPayslipIndirectCost,
            totalCost,
            totalMargin,
            totalMarginPercentage
          ];
        }

        function createCellFromInfoAndAppendToRow(info, row, textAlign = 'right') {
            let cell = document.createElement('td')
            if (!isNaN(info)) {
               info = numberFormat(info, true)
            }
            cell.classList.add('sonata-ba-list-field')
            cell.style.textAlign = textAlign
            cell.append(info)
            row.appendChild(cell)
        }

        function numberFormat(number, currency = false) {
          if (currency) {
            return new Intl.NumberFormat('es-ES', { style: 'currency', currency: 'EUR' }).format(number)
          } else {
            return new Intl.NumberFormat('es-ES', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(number)
          }
        }

        // Charts

        // Income line chart
        function drawIncomeChart() {
          const incomeChartCtx = document.getElementById('incomeChart').getContext('2d')
          let incomePerMonth = getTotalsPerMonth(deliveryNotesFiltered)
          let pyIncomePerMonth = getTotalsPerMonth(previousYearDeliveryNotesFiltered)
          const config = {
            type: 'line',
            data: {
              labels: incomePerMonth.map((res) => res.month),
              datasets: [
                {
                label: 'Actual',
                data: incomePerMonth.map((res) => res.income),
                fill: false,
                borderColor:'#eded5b',
                tension: 0.1
              },
                {
                label: 'Anterior',
                data: pyIncomePerMonth.map((res) => res.income),
                fill: false,
                borderColor:  '#747c08',
                tension: 0.1
              },
              ]
            },
            options: {
              plugins: {
                legend: {
                  position: 'right',
                },
                title: {
                  display: true,
                  text: 'Ingresos (€)'
                }
              }
            }
          };
          return new Chart(incomeChartCtx, config)
        }

        function drawMarginChart() {
          const marginChartCtx = document.getElementById('marginChart').getContext('2d')
          let marginPerMonth = getTotalsPerMonth(deliveryNotesFiltered)
          let pyMarginPerMonth = getTotalsPerMonth(previousYearDeliveryNotesFiltered)
          console.log('marginPerMonth', marginPerMonth)
          console.log('pyMarginPerMonth', pyMarginPerMonth)
          const config = {
            type: 'line',
            data: {
              labels: marginPerMonth.map((res) => res.month),
              datasets: [
                {
                label: 'Actual',
                data: marginPerMonth.map((res) => res.marginPercentage),
                fill: false,
                borderColor:  '#eded5b',
                tension: 0.1,
              },
                {
                label: 'Anterior',
                data: pyMarginPerMonth.map((res) => res.marginPercentage),
                fill: false,
                borderColor:  '#747c08',
                tension: 0.1,
              },
              ]
            },
            options: {
              plugins: {
                legend: {
                  position: 'right',
                },
                title: {
                  display: true,
                  text: 'Margen (%)'
                }
              },
            }
          };
          return new Chart(marginChartCtx, config)
        }

        function drawIncomeChartPerActivityLine() {
          const incomeChartCtx = document.getElementById('incomeChartPerActivityLine').getContext('2d')
          let incomePerActivityLine = getTotalsPerActivityLine(deliveryNotesFiltered)
          let pyIncomePerActivityLine = getTotalsPerActivityLine(previousYearDeliveryNotesFiltered)
          const config = {
            type: 'bar',
            data: {
              labels: incomePerActivityLine.map((res) => res.activityLine),
              datasets: [
                {
                label: 'Actual',
                data: incomePerActivityLine.map((res) => res.income),
                fill: false,
                borderColor:'#eded5b',
                backgroundColor:'#eded5b',
                tension: 0.1
              },
                {
                label: 'Anterior',
                data: incomePerActivityLine.map(
                  (res) =>
                    pyIncomePerActivityLine.find((pyRes) => pyRes.activityLine === res.activityLine)?.income ?? 0
                ),
                fill: false,
                borderColor:  '#747c08',
                backgroundColor: '#747c08',
                tension: 0.1
              },
              ]
            },
            options: {
              plugins: {
                legend: {
                  position: 'right',
                },
                title: {
                  display: true,
                  text: 'Ingresos por Línea de Actividad (€)'
                }
              }
            }
          };
          return new Chart(incomeChartCtx, config)
        }

        function updateIncomeChart(incomeChart) {
            let incomePerMonth = getTotalsPerMonth(deliveryNotesFiltered)
            let pyIncomePerMonth = getTotalsPerMonth(previousYearDeliveryNotesFiltered)
          if (incomePerMonth.length > 0) {
              incomeChart.data.labels = incomePerMonth.map((res) => res.month)
              incomeChart.data.datasets.forEach((dataset) => {
                if (dataset.label === 'Actual') {
                  dataset.data = incomePerMonth.map((res) => res.income)
                } else {
                  dataset.data = pyIncomePerMonth.map((res) => res.income)
                }
              })
              incomeChart.update()
            }
        }

        function updateMarginChart(marginChart) {
            let totalsPerMonth = getTotalsPerMonth(deliveryNotesFiltered)
            let pyTotalsPerMonth = getTotalsPerMonth(previousYearDeliveryNotesFiltered)
          if (totalsPerMonth.length > 0) {
            marginChart.data.labels = totalsPerMonth.map((res) => res.month)
            marginChart.data.datasets.forEach((dataset) => {
                if (dataset.label === 'Actual') {
                  dataset.data = totalsPerMonth.map((res) => res.marginPercentage)
                } else {
                  dataset.data = pyTotalsPerMonth.map((res) => res.marginPercentage)
                }
              })
            marginChart.update()
            }
        }

        function updateIncomeChartPerActivityLine(incomeChartPerActivityLine) {
          let incomePerActivityLine = getTotalsPerActivityLine(deliveryNotesFiltered)
          let pyIncomePerActivityLine = getTotalsPerActivityLine(previousYearDeliveryNotesFiltered)
            if (incomePerActivityLine.length > 0) {
              incomeChartPerActivityLine.data.labels = incomePerActivityLine.map((res) => res.activityLine)
              incomeChartPerActivityLine.data.datasets.forEach((dataset) => {
                if (dataset.label === 'Actual') {
                  dataset.data = incomePerActivityLine.map((res) => res.income)
                } else {
                  dataset.data = incomePerActivityLine.map(
                    (res) =>
                      pyIncomePerActivityLine.find((pyRes) => pyRes.activityLine === res.activityLine)?.income ?? 0
                  )
                }
              })
              incomeChartPerActivityLine.update()
            }
        }

        function getTotalsPerMonth(tempDeliveryNotes) {
          let totalsPerMonth = []
          for (let i = 1; i <= 12; i++) {
            totalsPerMonth[i] = {
              id: i,
              month: moment(i, 'M').format('MMM'),
              income: 0,
              margin: 0,
              marginPercentage: 0
            }
          }
          tempDeliveryNotes.reduce(function(res, deliveryNote) {
            let month = moment(deliveryNote.date, 'DD/MM/YYYY').month();
              totalsPerMonth[month].margin += deliveryNote.margin;
              totalsPerMonth[month].income += deliveryNote.income;
            return res;
          }, {});
            totalsPerMonth = totalsPerMonth.map((res) => {
              if (res.income) {
                res.marginPercentage = (res.margin / res.income) * 100
              }
              return res
            })

         return totalsPerMonth
        }

        function getTotalsPerActivityLine(tempDeliveryNotes) {
          let totalsPerMonth = []
          activityLines.forEach((activityLine) => {
            totalsPerMonth[activityLine.id] = {
              id: activityLine.id,
              activityLine: activityLine.name,
              income: 0,
              margin: 0
            }
          })
          tempDeliveryNotes.reduce(function(res, deliveryNote) {
            if (deliveryNote.activityLine_id) {
              totalsPerMonth[deliveryNote.activityLine_id].income += deliveryNote.income;
              totalsPerMonth[deliveryNote.activityLine_id].margin += deliveryNote.margin;
            }
            return res;
          }, {});
          totalsPerMonth = totalsPerMonth
            .filter(Object)
            .filter((activityLine) => activityLine.income > 0)
            .sort((a, b) => b.income - a.income)

         return totalsPerMonth
        }
      })

      const dateTimePickerParameters = {
        "pickTime": false,
        "pickDate": true,
        "useCurrent": true,
        "minDate": "1\/1\/1900",
        "maxDate": null,
        "showToday": true,
        "language": "es",
        "defaultDate": "",
        "disabledDates": [],
        "enabledDates": [],
        "icons": {
          "time": "fa fa-clock-o",
          "date": "fa fa-calendar",
          "up": "fa fa-chevron-up",
          "down": "fa fa-chevron-down"
        },
        "useStrict": false,
        "sideBySide": false,
        "daysOfWeekDisabled": [],
        "collapse": true,
        "calendarWeeks": false,
        "viewMode": "days",
        "minViewMode": "days",
        "useSeconds": false
      };

      jQuery(function ($) {
        $('#dp_custom_date_from').datetimepicker(dateTimePickerParameters);
      });
      jQuery(function ($) {
        $('#dp_custom_date_to').datetimepicker(dateTimePickerParameters);
      })
    </script>
{% endblock %}
